<?php

/**
 * @file
 * Provides quantity increments for commerce product variation entities.
 */

use Drupal\commerce_product\Entity\ProductVariationInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function commerce_quantity_increments_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'commerce_product_variation') {
    $fields['qty_increments'] = BaseFieldDefinition::create('decimal')
      ->setLabel(t('Quantity increments'))
      ->setDescription(t('The allowed quantity increments.'))
      ->setRequired(FALSE)
      ->setTranslatable(FALSE)
      ->setSettings([
        'unsigned' => TRUE,
        'size' => 'normal',
        'min' => 0,
      ])
      ->setDefaultValue(1)
      ->setDisplayOptions('view', [
        'type' => 'hidden',
      ])
      ->setDisplayOptions('form', [
        'type' => 'number',
        'weight' => 10,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }
  return $fields;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\commerce_cart\Form\AddToCartForm.
 */
function commerce_quantity_increments_form_commerce_order_item_add_to_cart_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['quantity']['widget'][0]['value'])) {
    /** @var \Drupal\commerce_cart\Form\AddToCartForm $form_object */
    $form_object = $form_state->getFormObject();
    /** @var \Drupal\commerce_order\Entity\OrderItemInterface $order_item */
    $order_item = $form_object->getEntity();
    $product_variation = $order_item->getPurchasedEntity();

    if ($product_variation instanceof ProductVariationInterface && $qty_increments = commerce_quantity_increments_get_increments_from_product_variation($product_variation)) {
      $form['quantity']['widget'][0]['value']['#element_validate'][] = 'commerce_quantity_increments_add_to_cart_form_validate_qty_increments';
      $form['quantity']['widget'][0]['value']['#default_value'] = $qty_increments;
      $form['quantity']['widget'][0]['value']['#min'] = $qty_increments;
      $form['quantity']['widget'][0]['value']['#step'] = $qty_increments;
    }
  }
}

/**
 * Form element validation callback for quantity field in add to cart form.
 */
function commerce_quantity_increments_add_to_cart_form_validate_qty_increments(array &$element, FormStateInterface $form_state, array &$form) {
  $values = $form_state->getValues();
  /** @var \Drupal\commerce_cart\Form\AddToCartForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\commerce_order\Entity\OrderItemInterface $order_item */
  $order_item = $form_object->getEntity();
  /** @var \Drupal\commerce_product\Entity\ProductVariationInterface $product_variation */
  $product_variation = $order_item->getPurchasedEntity();
  $qty_increments = commerce_quantity_increments_get_increments_from_product_variation($product_variation);
  if ($qty_increments) {
    $qty = $values['quantity'][0]['value'];
    if ($qty < $qty_increments || fmod($qty, $qty_increments)) {
      $form_state->setError($element, t('This product is available for purchase in increments of @increments only.', ['@increments' => $qty_increments]));
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for views_form_commerce_cart_form_default.
 */
function commerce_quantity_increments_form_views_form_commerce_cart_form_default_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $view = reset($form_state->getBuildInfo()['args']);
  if (!empty($view->result) && !empty($form['edit_quantity'])) {
    foreach ($view->result as $row) {
      /** @var \Drupal\commerce_order\Entity\OrderItemInterface $order_item */
      $order_item = $row->_relationship_entities['order_items'];
      $product_variation = $order_item->getPurchasedEntity();
      if ($product_variation instanceof ProductVariationInterface && $qty_increments = commerce_quantity_increments_get_increments_from_product_variation($product_variation)) {
        $form['edit_quantity'][$row->index]['#element_validate'][] = 'commerce_quantity_increments_commerce_cart_form_validate_qty_increments';
        $form['edit_quantity'][$row->index]['#min'] = $qty_increments;
        $form['edit_quantity'][$row->index]['#step'] = $qty_increments;
        if (!is_int($qty_increments)) {
          $form['edit_quantity'][$row->index]['#default_value'] = $order_item->getQuantity();
        }
      }
    }
  }
}

/**
 * Form element validation callback for quantity field in Views based cart form.
 */
function commerce_quantity_increments_commerce_cart_form_validate_qty_increments(array &$element, FormStateInterface $form_state, array &$form) {
  $values = $form_state->getValues();
  $view = reset($form_state->getBuildInfo()['args']);
  $index = $element['#parents'][1];
  /** @var \Drupal\commerce_order\Entity\OrderItemInterface $order_item */
  $order_item = $view->result[$index]->_relationship_entities['order_items'];
  $product_variation = $order_item->getPurchasedEntity();
  /** @var \Drupal\commerce_product\Entity\ProductVariationInterface $product_variation */
  $qty_increments = commerce_quantity_increments_get_increments_from_product_variation($product_variation);
  if ($qty_increments) {
    $qty = $values['edit_quantity'][$index];
    if ($qty < $qty_increments || fmod($qty, $qty_increments)) {
      $form_state->setError($element, t('This product is available for purchase in increments of @increments only.', ['@increments' => $qty_increments]));
    }
  }
}

/**
 * Returns the quantity increments constraint for the given product variation.
 *
 * @param \Drupal\commerce_product\Entity\ProductVariationInterface $product_variation
 *   The product variation.
 *
 * @return int|float|null
 *   The quantity increments constraint for the given product variation. The
 *   return value may be NULL, as the field isn't mandatory. If a value is
 *   returned, constraints with a decimal fraction will be returned as float
 *   values. Constraints without a decimal fraction will be cast to int.
 */
function commerce_quantity_increments_get_increments_from_product_variation(ProductVariationInterface $product_variation) {
  $qty_increments = $product_variation->get('qty_increments')->value;
  if ($qty_increments) {
    if ($qty_increments == round($qty_increments)) {
      // The increments constraint has no fraction, so we treat it as integer.
      $qty_increments = (int) round($qty_increments);
    }
  }
  return $qty_increments;
}
